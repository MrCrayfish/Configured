plugins {
    id 'multiloader-loader'
    id 'fabric-loom' version '1.6-SNAPSHOT'
}

sourceSets {
    configuredTest {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += test.compileClasspath
        runtimeClasspath += test.runtimeClasspath
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Framework
    modImplementation "com.mrcrayfish:framework-fabric:${minecraft_version}-${framework_version}"

    // NightConfig
    library include("com.electronwill.night-config:core:3.6.6")
    library include("com.electronwill.night-config:toml:3.6.6")

    // JEI
    modCompileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    modCompileOnly "mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}"
    modRuntimeOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"

    // ModMenu
    modApi "com.terraformersmc:modmenu:${modmenu_version}"
}

fabricApi {
    configureDataGeneration {
        outputDirectory.set(file("src/generated"))
    }
}

loom {
    def aw = file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        testClient {
            client()
            setConfigName("Fabric Test Client")
            setSource(sourceSets.configuredTest)
        }
        testServer {
            inherit server
            setConfigName("Fabric Test Server")
            setSource(sourceSets.configuredTest)
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'