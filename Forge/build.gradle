plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
}

archivesBaseName = "${mod_id}-forge"
version = "${minecraft_version}-${mod_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source sourceSets.test
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source sourceSets.test
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    implementation.extendsFrom library
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Framework
    implementation fg.deobf("com.mrcrayfish:framework-forge:${minecraft_version}-${framework_version}")

    // JEI
    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    //runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly project(":Common")
    testCompileOnly project(":Common")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand project.properties
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            artifact jar
            artifact sourcesJar

            pom.withXml {
                def depsNode = asNode().appendNode('dependencies')
                [this.configurations.library].each {
                    it.allDependencies.each {
                        def depNode = depsNode.appendNode('dependency')
                        depNode.appendNode('groupId', it.group)
                        depNode.appendNode('artifactId', it.name)
                        depNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("LOCAL_MAVEN")
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/MrCrayfish/Maven"
            credentials {
                username = System.getenv("GITHUB_USERNAME")//rootProject.githubCredentials['GITHUB_USERNAME']
                password = System.getenv("GITHUB_TOKEN")//rootProject.githubCredentials['GITHUB_TOKEN']
            }
        }
    }
}
